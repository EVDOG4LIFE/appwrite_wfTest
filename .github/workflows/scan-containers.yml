name: Container Security Scan
on:
  pull_request:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Build the Docker image
        run: docker build . -t appwrite_image:${{ github.sha }}
      - name: Save Docker image
        run: docker save appwrite_image:${{ github.sha }} > image.tar
      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar

  scan:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
      - name: Load Docker image
        run: docker load < image.tar
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'appwrite_image:${{ github.sha }}'
          format: 'json'
          output: 'trivy-results.json'
          exit-code: '0'
          ignore-unfixed: 'false'
          severity: 'CRITICAL,HIGH'
          ignorefile: '.trivyignore'
      - name: Upload Trivy scan results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-results
          path: trivy-results.json

  compare-and-report:
    if: github.event_name == 'pull_request'
    needs: scan
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Download Trivy results
        uses: actions/download-artifact@v4
        with:
          name: trivy-results
      - name: Build main branch image
        run: |
          git checkout main
          docker build . -t appwrite_image:main
      - name: Scan main branch image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'appwrite_image:main'
          format: 'json'
          output: 'trivy-results-main.json'
          exit-code: '0'
          ignore-unfixed: 'false'
          severity: 'CRITICAL,HIGH'
          ignorefile: '.trivyignore'
      - name: Compare vulnerabilities and create report
        run: |
          # Install jq for JSON parsing
          sudo apt-get update && sudo apt-get install -y jq
          
          # Function to extract vulnerabilities
          extract_vulnerabilities() {
            jq -r '.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | select(.Severity == "CRITICAL" or .Severity == "HIGH") | [.VulnerabilityID, .PkgName, .InstalledVersion, .FixedVersion, .Severity] | @tsv' $1
          }
          
          # Extract vulnerabilities from both scans
          pr_vulns=$(extract_vulnerabilities trivy-results.json)
          main_vulns=$(extract_vulnerabilities trivy-results-main.json)
          
          # Find new vulnerabilities
          new_vulns=$(comm -23 <(echo "$pr_vulns" | sort) <(echo "$main_vulns" | sort))
          
          # Create markdown table
          echo "## New Vulnerabilities Introduced" > report.md
          echo "" >> report.md
          echo "| Vulnerability ID | Package Name | Installed Version | Fixed Version | Severity |" >> report.md
          echo "|-------------------|--------------|-------------------|---------------|----------|" >> report.md
          echo "$new_vulns" | while IFS=$'\t' read -r id pkg installed fixed severity; do
            echo "| $id | $pkg | $installed | $fixed | $severity |" >> report.md
          done
          
          # If no new vulnerabilities, add a message
          if [ -z "$new_vulns" ]; then
            echo "No new high or critical vulnerabilities introduced." >> report.md
          fi
      - name: Comment PR
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs')
            const report = fs.readFileSync('report.md', 'utf8')
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: report
            })
