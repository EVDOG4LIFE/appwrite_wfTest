name: PR Security Scan
on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
        fetch-depth: 0
        submodules: 'recursive'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build the Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: pr_image:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'pr_image:${{ github.sha }}'
        format: 'json'
        output: 'trivy-results.json'
        exit-code: '1'
        ignore-unfixed: 'false'
        severity: 'CRITICAL,HIGH,MEDIUM'
      continue-on-error: true

    - name: Process and post Trivy scan results
      uses: actions/github-script@v7
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const fs = require('fs');
          let commentBody = '## Trivy Security Scan Results for PR\n\n';
          
          try {
            const trivyResults = JSON.parse(fs.readFileSync('trivy-results.json', 'utf8'));
            
            if (trivyResults.Results && trivyResults.Results.some(result => result.Vulnerabilities && result.Vulnerabilities.length > 0)) {
              commentBody += 'Vulnerabilities found:\n\n';
              commentBody += '| Vulnerability ID | Package Name | Installed Version | Severity |\n';
              commentBody += '|------------------|--------------|-------------------|----------|\n';
              trivyResults.Results.forEach(result => {
                if (result.Vulnerabilities) {
                  result.Vulnerabilities.forEach(vuln => {
                    commentBody += `| ${vuln.VulnerabilityID} | ${vuln.PkgName} | ${vuln.InstalledVersion} | ${vuln.Severity} |\n`;
                  });
                }
              });
              commentBody += '\nPlease review and address these vulnerabilities before merging.';
            } else {
              commentBody += 'ðŸŽ‰ No vulnerabilities found! Great job on maintaining a secure codebase.';
            }
          } catch (error) {
            commentBody += `Error processing scan results: ${error.message}\nPlease check the workflow logs for more details.`;
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: commentBody
          });
