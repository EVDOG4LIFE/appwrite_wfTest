name: PR Security Scan
on:
  pull_request:
    branches: [main]

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Scan PR changes
        run: |
          base_commit=$(git merge-base ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
          changed_files=$(git diff --name-only $base_commit ${{ github.sha }})
          echo "$changed_files" | xargs trivy fs --format json --output pr-changes-scan.json

      - name: Analyze PR scan results
        run: |
          jq '.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | select(.Severity == "HIGH" or .Severity == "CRITICAL")' pr-changes-scan.json > new-vulnerabilities.json

      - name: Comment PR
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');
            const newVulns = JSON.parse(fs.readFileSync('new-vulnerabilities.json', 'utf8'));
            
            let comment = '## Security Scan Results\n\n';
            if (newVulns.length > 0) {
              comment += 'New potential vulnerabilities found in this PR:\n\n';
              newVulns.forEach(vuln => {
                comment += `- **${vuln.VulnerabilityID}** (${vuln.Severity}): ${vuln.Title}\n`;
                comment += `  Package: ${vuln.PkgName} (${vuln.InstalledVersion})\n`;
                comment += `  Fixed Version: ${vuln.FixedVersion || 'Not available'}\n\n`;
              });
            } else {
              comment += 'No new high or critical vulnerabilities found in the changes.\n';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.name,
              body: comment
            });
